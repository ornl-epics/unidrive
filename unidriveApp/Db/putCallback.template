#
# Set an external setpoint with put callback. This version expects to be given
# a flag that will be true if the setpoint has been reached, rather than a 
# readback to be compared with the setpoint.
#
# There is a timeout; the error indication is that the setpoint will be set to 
# -1.0 instead of being left at the requested value.
#
# There is a reset PV for manual recovery; error indication is as for timeout.
#
# Another approach if the PV is hung up is to simply set it to a value it can
# get to. If there is an original putcallback in progress it will return when 
# the new value is reached, and the setpoint will be at the new value.
#
# Macros:
# P : prefix, maybe BL:TA:D
# C : channel name for synchronized setpoint $(P):$(C)Set
# EGU: units of setpoint default = ' '
# OUT: controlled external PV to set 
# IN: flag PV for expected to go true when operation complete.
# TOL: tolerance between IN and setpoint to finish, default = 0.1
# TO: timeout in seconds, defaults to 0 (no timeout).
# ST: settling time in seconds: value must meet tolerance this long. Default 0,
#     which means it must meet tolerance once.
# HI: value for DRVH and HOPR default = 0
# LO: value for DRVL and LOPR default = 0
# SPV: PV to be processed if put callback succeeds
# 
record(ao, "$(P):$(C):Req") {
   field(DESC, "Synchronized setpoint")
   field(HOPR, "$(HI='0')")
   field(LOPR, "$(LO='0')")
   field(DRVH, "$(HI='0')")
   field(DRVL, "$(LO='0')")
   field(EGU, "$(EGU=' ')")
   field(MDEL, "-1")
   info(archive, "Monitor, 00:00:01, VAL")
   info(autosaveFields, "VAL")
   field(PREC, "2")
   field(FLNK, "$(P):$(C)ValidTest")
}

record(calcout, "$(P):$(C)ValidTest") {
   field(INPA, "$(P):$(C):Req")
   field(CALC, "A>-0.5")
   field(IVOA, "Don't drive outputs")
   field(OOPT, "When Non-zero")
   field(OUT, "$(P):$(C)BusySet.PROC PP")
}

record(seq, "$(P):$(C)BusySet") {
   field(DOL1, "$(P):$(C):Req")
   field(LNK1, "$(P):$(C)Output PP")
   field(DO2, "1")
   field(LNK2, "$(P):$(C):Busy PP")
}

record(busy, "$(P):$(C):Busy") {
   field(ONAM, "Busy")
   field(ZNAM, "Ready")
}

# Next PV used by older GUI
record(bo, "$(P):$(C):Failure") {
   field(DOL, "1")
   field(OUT, "$(P):$(C):Reset PP")
}

record(bo, "$(P):$(C):Reset") {
   field(DESC, "Stop testing and clear busy")
   field(ONAM, "!")	# active state
   field(ZNAM, "reset")	# shows in button
}

record(calc, "$(P):$(C)Scan") {
   field(SCAN, "1 second")
   field(INPA, "$(P):$(C):Reset")
   field(CALC, "A?1:2")
   field(FLNK, "$(P):$(C)ScanBr")
}

record(seq, "$(P):$(C)ScanBr") {
   field(SELM, "Specified")
   field(SELL, "$(P):$(C)Scan")
   field(LNK1, "$(P):$(C)Fail.PROC PP")
   field(LNK2, "$(P):$(C)TestBusy.PROC PP")
}

record(calc, "$(P):$(C)Time") {
   field(VAL, "0")
   field(CALC, "A?0:VAL+1;A:=0")
}

record(calc, "$(P):$(C)STime") {
   field(VAL, "0")
   field(CALC, "A?0:VAL+1;A:=0")
}

record(calc, "$(P):$(C)TestBusy") {
   field(INPA, "$(P):$(C):Busy")
   field(CALC, "A?3:4")
   field(FLNK, "$(P):$(C)BusyBr")
}

record(seq, "$(P):$(C)BusyBr") {
   field(SELM, "Mask")
   field(SELL, "$(P):$(C)TestBusy")
   field(LNK1, "$(P):$(C)Time.PROC PP")
   field(LNK2, "$(P):$(C)TestTO.PROC PP")
   field(DO3, "1")
   field(LNK3, "$(P):$(C)Time.A")
}

record(calc, "$(P):$(C)TestTO") {
   field(INPA, "$(P):$(C)Time")
   field(INPB, "$(TO='0')")
   field(CALC, "(A>B&&B>0)?1:2")
   field(FLNK, "$(P):$(C)TOBr")
}

record(seq, "$(P):$(C)TOBr") {
   field(SELM, "Specified")
   field(SELL, "$(P):$(C)TestTO")
   field(LNK1, "$(P):$(C)Fail.PROC PP")
   field(LNK2, "$(P):$(C)TestVal.PROC PP")
}

record(calc, "$(P):$(C)TestVal") {
   field(INPA, "$(IN) NPP MS")
   field(CALC, "A>0.5?3:4")
   field(FLNK, "$(P):$(C)ValBr")
}

record(seq, "$(P):$(C)ValBr") {
   field(SELM, "Mask")
   field(SELL, "$(P):$(C)TestVal")
   field(LNK1, "$(P):$(C)STime.PROC PP")
   field(LNK2, "$(P):$(C)TestSet.PROC PP")
   field(DO3, "1")
   field(LNK3, "$(P):$(C)STime.A")
}

record(calc, "$(P):$(C)TestSet") {
   field(INPA, "$(P):$(C)STime")
   field(INPB, "$(ST=0)")
   field(CALC, "A>=B?3:4")
   field(FLNK, "$(P):$(C)SetBr")
}

record(seq, "$(P):$(C)SetBr") {
   field(SELM, "Mask")
   field(SELL, "$(P):$(C)TestSet")
   field(LNK1, "$(P):$(C)ClearBusy.PROC PP")
   field(LNK2, "$(SPV=$(P):$(C)DefaultSPV).PROC PP")
   # No action if have not settled
}

record(bo, "$(P):$(C)DefaultSPV") {
   field(DOL, "1")
}


record(ao, "$(P):$(C)Output") {
   field(OUT, "$(OUT) CA MS")
   info(archive, "Monitor, 00:00:01, VAL")
   info(autosaveFields, "VAL")
}


record(seq, "$(P):$(C)Fail") {
   field(DO1, "0")
   field(LNK1, "$(P):$(C):Reset PP")	# clear reset button
   field(DO2, "-1.0")
   field(LNK2, "$(P):$(C):Req PP")	# setpoint to failure value
   field(FLNK, "$(P):$(C)ClearBusy")
}

record(seq, "$(P):$(C)ClearBusy") {
   field(DO1, "0")
   field(LNK1, "$(P):$(C)Time")	 	# reset Timeout timer
   field(DO2, "0")
   field(LNK2, "$(P):$(C)STime") 	# reset Settling time timer
   field(DO3, "0")
   field(LNK3, "$(P):$(C):Busy CA")	# clear busy
}

#
# TestIn and TestOut are intended only for testing purposes; they can be 
# provided to the macros IN and OUT.
#
record(ao, "$(P):$(C):TestIn") {
   field(PREC, "3")
}
record(ao, "$(P):$(C):TestOut") {
   field(PREC, "3")
}

